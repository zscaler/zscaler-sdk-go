package malware_protection

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/zscaler/zscaler-sdk-go/v3/tests"
)

func TestATPMalwareInspection(t *testing.T) {
	// Initialize the API client using the testing setup (not shown)
	service, err := tests.NewOneAPIClient()
	if err != nil {
		t.Fatalf("Error creating client: %v", err)
	}

	// Retrieve current ATP Malware Inspection settings
	currentInspection, err := GetATPMalwareInspection(context.Background(), service)
	if err != nil {
		t.Fatalf("Error fetching initial ATP Malware Inspection settings: %v", err)
	}

	// Store original settings to restore later
	originalInspection := *currentInspection

	// Modify the settings for the test
	testInspection := *currentInspection
	testInspection.InspectInbound = !currentInspection.InspectInbound   // Toggle the current setting
	testInspection.InspectOutbound = !currentInspection.InspectOutbound // Toggle the current setting

	// Update with the new settings
	updatedInspection, _, err := UpdateATPMalwareInspection(context.Background(), service, testInspection)
	if err != nil {
		t.Fatalf("Error updating ATP Malware Inspection settings: %v", err)
	}

	// Check if the settings were updated correctly
	assert.Equal(t, testInspection.InspectInbound, updatedInspection.InspectInbound, "InspectInbound should be updated")
	assert.Equal(t, testInspection.InspectOutbound, updatedInspection.InspectOutbound, "InspectOutbound should be updated")

	// Restore original settings
	_, _, err = UpdateATPMalwareInspection(context.Background(), service, originalInspection)
	if err != nil {
		t.Fatalf("Error restoring original ATP Malware Inspection settings: %v", err)
	}
}

func TestATPMalwareProtocols(t *testing.T) {
	// Initialize the API client using the testing setup (not shown)
	service, err := tests.NewOneAPIClient()
	if err != nil {
		t.Fatalf("Error creating client: %v", err)
	}

	// Retrieve current ATP Malware Protocol settings
	currentProtocol, err := GetATPMalwareProtocols(context.Background(), service)
	if err != nil {
		t.Fatalf("Error fetching initial ATP Malware Protocol settings: %v", err)
	}

	// Store original settings to restore later
	originalProtocol := *currentProtocol

	// Modify the settings for the test
	testProtocol := *currentProtocol
	testProtocol.InspectHttp = !currentProtocol.InspectHttp               // Toggle the current setting
	testProtocol.InspectFtpOverHttp = !currentProtocol.InspectFtpOverHttp // Toggle the current setting
	testProtocol.InspectFtp = !currentProtocol.InspectFtp                 // Toggle the current setting

	// Update with the new settings
	updatedProtocol, _, err := UpdateATPMalwareProtocol(context.Background(), service, testProtocol)
	if err != nil {
		t.Fatalf("Error updating ATP Malware Protocol settings: %v", err)
	}

	// Check if the settings were updated correctly
	assert.Equal(t, testProtocol.InspectHttp, updatedProtocol.InspectHttp, "InspectHttp should be updated")
	assert.Equal(t, testProtocol.InspectFtpOverHttp, updatedProtocol.InspectFtpOverHttp, "InspectFtpOverHttp should be updated")
	assert.Equal(t, testProtocol.InspectFtp, updatedProtocol.InspectFtp, "InspectFtp should be updated")

	// Restore original settings
	_, _, err = UpdateATPMalwareProtocol(context.Background(), service, originalProtocol)
	if err != nil {
		t.Fatalf("Error restoring original ATP Malware Protocol settings: %v", err)
	}
}

func TestMalwarePolicy(t *testing.T) {
	// Initialize the API client using the testing setup (not shown)
	service, err := tests.NewOneAPIClient()
	if err != nil {
		t.Fatalf("Error creating client: %v", err)
	}

	// Retrieve current ATP Malware Policy settings
	currentPolicy, err := GetATPMalwarePolicy(context.Background(), service)
	if err != nil {
		t.Fatalf("Error fetching initial ATP Malware Policy settings: %v", err)
	}

	// Store original settings to restore later
	originalPolicy := *currentPolicy

	// Modify the settings for the test
	testPolicy := *currentPolicy
	testPolicy.BlockUnscannableFiles = !currentPolicy.BlockUnscannableFiles
	testPolicy.BlockPasswordProtectedArchiveFiles = !currentPolicy.BlockPasswordProtectedArchiveFiles

	// Update with the new settings
	updatedPolicy, _, err := UpdateATPMalwarePolicy(context.Background(), service, testPolicy)
	if err != nil {
		t.Fatalf("Error updating ATP Malware Policy settings: %v", err)
	}

	// Check if the settings were updated correctly
	assert.Equal(t, testPolicy.BlockUnscannableFiles, updatedPolicy.BlockUnscannableFiles, "BlockUnscannableFiles should be updated")
	assert.Equal(t, testPolicy.BlockPasswordProtectedArchiveFiles, updatedPolicy.BlockPasswordProtectedArchiveFiles, "BlockPasswordProtectedArchiveFiles should be updated")

	_, _, err = UpdateATPMalwarePolicy(context.Background(), service, originalPolicy)
	if err != nil {
		t.Fatalf("Error restoring original ATP Malware Policy settings: %v", err)
	}
}

func TestMalwareSettings(t *testing.T) {
	// Initialize the API client using the testing setup (not shown)
	service, err := tests.NewOneAPIClient()
	if err != nil {
		t.Fatalf("Error creating client: %v", err)
	}

	// Retrieve current ATP Malware Settings settings
	currentSettings, err := GetATPMalwareSettings(context.Background(), service)
	if err != nil {
		t.Fatalf("Error fetching initial ATP Malware Settings settings: %v", err)
	}

	// Store original settings to restore later
	originalSettings := *currentSettings

	// Modify the settings for the test
	testSettings := *currentSettings
	testSettings.VirusBlocked = !currentSettings.VirusBlocked
	testSettings.VirusCapture = !currentSettings.VirusCapture
	testSettings.UnwantedApplicationsBlocked = !currentSettings.UnwantedApplicationsBlocked
	testSettings.UnwantedApplicationsCapture = !currentSettings.UnwantedApplicationsCapture
	testSettings.TrojanBlocked = !currentSettings.TrojanBlocked
	testSettings.TrojanCapture = !currentSettings.TrojanCapture
	testSettings.WormBlocked = !currentSettings.WormBlocked
	testSettings.WormCapture = !currentSettings.WormCapture
	testSettings.AdwareBlocked = !currentSettings.AdwareBlocked
	testSettings.SpywareBlocked = !currentSettings.SpywareBlocked
	testSettings.SpywareCapture = !currentSettings.SpywareCapture
	testSettings.RansomwareBlocked = !currentSettings.RansomwareBlocked
	testSettings.RansomwareCapture = !currentSettings.RansomwareCapture
	testSettings.RemoteAccessToolBlocked = !currentSettings.RemoteAccessToolBlocked
	testSettings.RemoteAccessToolCapture = !currentSettings.RemoteAccessToolCapture

	// Update with the new settings
	updatedSettings, _, err := UpdateATPMalwareSettings(context.Background(), service, testSettings)
	if err != nil {
		t.Fatalf("Error updating ATP Malware Settings settings: %v", err)
	}

	// Check if the settings were updated correctly
	assert.Equal(t, testSettings.VirusBlocked, updatedSettings.VirusBlocked, "VirusBlocked should be updated")
	assert.Equal(t, testSettings.VirusCapture, updatedSettings.VirusCapture, "VirusBlocked should be updated")
	assert.Equal(t, testSettings.UnwantedApplicationsBlocked, updatedSettings.UnwantedApplicationsBlocked, "UnwantedApplicationsBlocked should be updated")
	assert.Equal(t, testSettings.UnwantedApplicationsCapture, updatedSettings.UnwantedApplicationsCapture, "UnwantedApplicationsCapture should be updated")
	assert.Equal(t, testSettings.TrojanBlocked, updatedSettings.TrojanBlocked, "TrojanBlocked should be updated")
	assert.Equal(t, testSettings.TrojanCapture, updatedSettings.TrojanCapture, "TrojanCapture should be updated")
	assert.Equal(t, testSettings.WormBlocked, updatedSettings.WormBlocked, "WormBlocked should be updated")
	assert.Equal(t, testSettings.WormCapture, updatedSettings.WormCapture, "WormCapture should be updated")
	assert.Equal(t, testSettings.AdwareBlocked, updatedSettings.AdwareBlocked, "AdwareBlocked should be updated")
	assert.Equal(t, testSettings.SpywareBlocked, updatedSettings.SpywareBlocked, "SpywareBlocked should be updated")
	assert.Equal(t, testSettings.SpywareCapture, updatedSettings.SpywareCapture, "SpywareCapture should be updated")
	assert.Equal(t, testSettings.RansomwareBlocked, updatedSettings.RansomwareBlocked, "RansomwareBlocked should be updated")
	assert.Equal(t, testSettings.RansomwareCapture, updatedSettings.RansomwareCapture, "RansomwareCapture should be updated")
	assert.Equal(t, testSettings.RemoteAccessToolBlocked, updatedSettings.RemoteAccessToolBlocked, "RemoteAccessToolBlocked should be updated")
	assert.Equal(t, testSettings.RemoteAccessToolCapture, updatedSettings.RemoteAccessToolCapture, "RemoteAccessToolCapture should be updated")

	_, _, err = UpdateATPMalwareSettings(context.Background(), service, originalSettings)
	if err != nil {
		t.Fatalf("Error restoring original ATP Malware Settings settings: %v", err)
	}
}
