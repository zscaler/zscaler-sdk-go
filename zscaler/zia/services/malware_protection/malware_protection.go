package malware_protection

import (
	"context"
	"fmt"
	"net/http"

	"github.com/zscaler/zscaler-sdk-go/v3/zscaler"
)

const (
	atpMalwareInspectionEndpoint         = "/zia/api/v1/cyberThreatProtection/atpMalwareInspection"
	atpMalwareProtectionProtocolEndpoint = "/zia/api/v1/cyberThreatProtection/atpMalwareProtocols"
	malwarePolicyEndpoint                = "/zia/api/v1/cyberThreatProtection/malwarePolicy"
	malwareSettingsEndpoint              = "/zia/api/v1/cyberThreatProtection/malwareSettings"
)

// Malware Inspection
type ATPMalwareInspection struct {
	// A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
	InspectInbound bool `json:"inspectInbound"`

	// A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
	InspectOutbound bool `json:"inspectOutbound"`
}

// Malware Protocols
type ATPMalwareProtocols struct {
	// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for malicious content in real time
	InspectHttp bool `json:"inspectHttp"`

	// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
	InspectFtpOverHttp bool `json:"inspectFtpOverHttp"`

	// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
	InspectFtp bool `json:"inspectFtp"`
}

// Malware Policy
type MalwarePolicy struct {
	// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service is unable to scan.
	BlockUnscannableFiles bool `json:"blockUnscannableFiles"`

	// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
	BlockPasswordProtectedArchiveFiles bool `json:"blockPasswordProtectedArchiveFiles"`
}

// Malware Settings
type MalwareSettings struct {
	// A Boolean value that indicates if malicious programs that cause damage to systems and data are allowed or blocked.
	VirusBlocked bool `json:"virusBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for viruses
	VirusCapture bool `json:"virusCapture"`

	// A Boolean value that allows or blocks unwanted files that are downloaded alongside intentional programs downloaded by users
	UnwantedApplicationsBlocked bool `json:"unwantedApplicationsBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for unwanted applications
	UnwantedApplicationsCapture bool `json:"unwantedApplicationsCapture"`

	// A Boolean value that allows or blocks malicious programs such as Trojan viruses that are presented as beneficial or useful
	TrojanBlocked bool `json:"trojanBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for Trojan viruses
	TrojanCapture bool `json:"trojanCapture"`

	// A Boolean value indicating whether malicious programs that duplicate themselves to spread malicious code to other devices are allowed or blocked
	WormBlocked bool `json:"wormBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for worms
	WormCapture bool `json:"wormCapture"`

	// A Boolean value indicating whether malicious files that automatically render advertisements and install adware are allowed or blocked
	AdwareBlocked bool `json:"adwareBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for adware
	AdwareCapture bool `json:"adwareCapture"`

	// A Boolean value indicating whether malicious files that covertly gather information about a user or an organization are allowed or blocked
	SpywareBlocked bool `json:"spywareBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for spyware
	SpywareCapture bool `json:"spywareCapture"`

	// A Boolean value specifying whether to allow or block malicious programs that can encrypt files and prevent users from accessing their devices, files, or data until a ransom payment is made.
	RansomwareBlocked bool `json:"ransomwareBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for ransomware
	RansomwareCapture bool `json:"ransomwareCapture"`

	// A Boolean value specifying whether to allow or block file download from tools that are common from remote access sites
	RemoteAccessToolBlocked bool `json:"remoteAccessToolBlocked"`

	// A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for remote access tools
	RemoteAccessToolCapture bool `json:"remoteAccessToolCapture"`
}

func GetATPMalwareInspection(ctx context.Context, service *zscaler.Service) (*ATPMalwareInspection, error) {
	var inspection ATPMalwareInspection
	err := service.Client.Read(ctx, atpMalwareInspectionEndpoint, &inspection)
	if err != nil {
		return nil, err
	}
	return &inspection, nil
}

func UpdateATPMalwareInspection(ctx context.Context, service *zscaler.Service, inspection ATPMalwareInspection) (*ATPMalwareInspection, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, atpMalwareInspectionEndpoint, inspection)
	if err != nil {
		return nil, nil, err
	}

	atpInspection, ok := resp.(*ATPMalwareInspection)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware inspection : %+v", atpInspection)
	return atpInspection, nil, nil
}

func GetATPMalwareProtocols(ctx context.Context, service *zscaler.Service) (*ATPMalwareProtocols, error) {
	var protocol ATPMalwareProtocols
	err := service.Client.Read(ctx, atpMalwareProtectionProtocolEndpoint, &protocol)
	if err != nil {
		return nil, err
	}
	return &protocol, nil
}

func UpdateATPMalwareProtocol(ctx context.Context, service *zscaler.Service, protocol ATPMalwareProtocols) (*ATPMalwareProtocols, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, atpMalwareProtectionProtocolEndpoint, protocol)
	if err != nil {
		return nil, nil, err
	}

	atpProtocol, ok := resp.(*ATPMalwareProtocols)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware protocol : %+v", atpProtocol)
	return atpProtocol, nil, nil
}

func GetATPMalwarePolicy(ctx context.Context, service *zscaler.Service) (*MalwarePolicy, error) {
	var policy MalwarePolicy
	err := service.Client.Read(ctx, malwarePolicyEndpoint, &policy)
	if err != nil {
		return nil, err
	}
	return &policy, nil
}

func UpdateATPMalwarePolicy(ctx context.Context, service *zscaler.Service, policy MalwarePolicy) (*MalwarePolicy, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, malwarePolicyEndpoint, policy)
	if err != nil {
		return nil, nil, err
	}

	malwarePolicy, ok := resp.(*MalwarePolicy)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware Policy : %+v", malwarePolicy)
	return malwarePolicy, nil, nil
}

func GetATPMalwareSettings(ctx context.Context, service *zscaler.Service) (*MalwareSettings, error) {
	var setting MalwareSettings
	err := service.Client.Read(ctx, malwareSettingsEndpoint, &setting)
	if err != nil {
		return nil, err
	}
	return &setting, nil
}

func UpdateATPMalwareSettings(ctx context.Context, service *zscaler.Service, setting MalwareSettings) (*MalwareSettings, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, malwareSettingsEndpoint, setting)
	if err != nil {
		return nil, nil, err
	}

	malwareSetting, ok := resp.(*MalwareSettings)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware Setting : %+v", malwareSetting)
	return malwareSetting, nil, nil
}
