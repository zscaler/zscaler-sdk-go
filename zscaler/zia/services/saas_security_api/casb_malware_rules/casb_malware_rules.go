package casb_malware_rules

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"

	"github.com/zscaler/zscaler-sdk-go/v3/zscaler"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/common"
	"github.com/zscaler/zscaler-sdk-go/v3/zscaler/zia/services/saas_security_api"
)

const (
	casbMalwareRulesEndpoint = "/zia/api/v1/casbMalwareRules"
)

type CasbMalwareRules struct {
	Type                   string                          `json:"type,omitempty"`
	ID                     int                             `json:"id,omitempty"`
	Order                  int                             `json:"order,omitempty"`
	Name                   string                          `json:"name,omitempty"`
	State                  string                          `json:"state,omitempty"`
	Action                 string                          `json:"action,omitempty"`
	QuarantineLocation     string                          `json:"quarantineLocation,omitempty"`
	ScanInboundEmailLink   string                          `json:"scanInboundEmailLink,omitempty"`
	LastModifiedTime       int                             `json:"lastModifiedTime,omitempty"`
	AccessControl          string                          `json:"accessControl,omitempty"`
	LastModifiedBy         *common.IDNameExtensions        `json:"lastModifiedBy,omitempty"`
	CasbEmailLabel         *common.IDCustom                `json:"casbEmailLabel,omitempty"`
	CasbTombstoneTemplate  *common.IDCustom                `json:"casbTombstoneTemplate"`
	Buckets                []common.IDNameExtensions       `json:"buckets,omitempty"`
	Labels                 []common.IDNameExtensions       `json:"labels,omitempty"`
	CloudAppTenantIDs      []common.IDNameExtensions       `json:"cloudAppTenantIds,omitempty"`
	CloudAppTenants        []common.IDNameExtensions       `json:"cloudAppTenants,omitempty"`
	CloudApplicationTenant []saas_security_api.CasbTenants `json:"cloudApplicationTenant,omitempty"`
}

func GetByRuleID(ctx context.Context, service *zscaler.Service, ruleType string, ruleID int) (*CasbMalwareRules, error) {
	var rule CasbMalwareRules
	endpoint := fmt.Sprintf("%s/%d?ruleType=%s", casbMalwareRulesEndpoint, ruleID, url.QueryEscape(ruleType))
	err := service.Client.Read(ctx, endpoint, &rule)
	if err != nil {
		return nil, err
	}
	service.Client.GetLogger().Printf("[DEBUG] Returning casb dlp rule from Get: %d", rule.ID)
	return &rule, nil
}

func GetByRuleType(ctx context.Context, service *zscaler.Service, ruleType string) ([]CasbMalwareRules, error) {
	var rules []CasbMalwareRules
	endpoint := fmt.Sprintf("%s?ruleType=%s", casbMalwareRulesEndpoint, url.QueryEscape(ruleType))
	err := service.Client.Read(ctx, endpoint, &rules)
	if err != nil {
		return nil, err
	}
	service.Client.GetLogger().Printf("[DEBUG] Returning casb dlp rule from GetByRuleType: %+v", rules)
	return rules, nil
}

func Create(ctx context.Context, service *zscaler.Service, rule *CasbMalwareRules) (*CasbMalwareRules, error) {
	url := casbMalwareRulesEndpoint
	resp, err := service.Client.Create(ctx, url, *rule)
	if err != nil {
		return nil, err
	}
	createdRules, ok := resp.(*CasbMalwareRules)
	if !ok {
		return nil, errors.New("object returned from API was not a CasbDLPRules pointer")
	}

	service.Client.GetLogger().Printf("[DEBUG] Returning casb dlp rule from create: %d", createdRules.ID)
	return createdRules, nil
}

func Update(ctx context.Context, service *zscaler.Service, ruleID int, rules *CasbMalwareRules) (*CasbMalwareRules, error) {
	url := fmt.Sprintf("%s/%d", casbMalwareRulesEndpoint, ruleID)
	resp, err := service.Client.UpdateWithPut(ctx, url, *rules)
	if err != nil {
		return nil, err
	}
	updatedRules, _ := resp.(*CasbMalwareRules)
	service.Client.GetLogger().Printf("[DEBUG] Returning casb dlp rule from update: %d", updatedRules.ID)
	return updatedRules, nil
}

func Delete(ctx context.Context, service *zscaler.Service, ruleType string, ruleID int) (*http.Response, error) {
	endpoint := fmt.Sprintf("%s/%d?ruleType=%s", casbMalwareRulesEndpoint, ruleID, url.QueryEscape(ruleType))
	err := service.Client.Delete(ctx, endpoint)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

func GetAll(ctx context.Context, service *zscaler.Service) ([]CasbMalwareRules, error) {
	var rules []CasbMalwareRules
	err := common.ReadAllPages(ctx, service.Client, casbMalwareRulesEndpoint+"/all", &rules)
	return rules, err
}
